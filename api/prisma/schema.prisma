// Datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  staff
  viewer
}

enum TaskPriority {
  low
  medium
  high
}

enum TaskStatus {
  backlog
  todo
  doing
  done
  returned
  approved
  rejected
}

// Models
model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  fullName     String
  email        String        @unique
  phone        String
  role         UserRole      @default(viewer)
  avatarUrl    String
  username     String        @unique
  password     String

  // Relations
  assignedTasks Task[]       @relation("TaskAssignees")
  attachments   Attachment[]
  chatMessages  ChatMessage[]
}

model Task {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  title        String
  description  String
  priority     TaskPriority
  dueDate      DateTime
  status       TaskStatus
  notes        String?

  // Relations
  assignees    User[]         @relation("TaskAssignees")
  attachments  Attachment[]
  chatMessages ChatMessage[]
}

model Attachment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  name       String
  url        String

  // Relations
  uploader   User     @relation(fields: [uploaderId], references: [id])
  uploaderId String
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
}

model ChatMessage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  text       String
  timestamp  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
}